/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PetVolunteer;

import ReliefSystem.Ecosystem;
import ReliefSystem.HealthCamp.HealthCamp;
import ReliefSystem.HealthCamp.HealthCampDirectory;
//import ReliefSystem.PetVolunteer.PetVolunteerDirectory;
import ReliefSystem.PetVolunteer.PetVolunteer;
import ReliefSystem.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 18578
 */
public class RegisterHealthCamp extends javax.swing.JPanel {

    /**
     * Creates new form RegisterHealthCamp
     */
    JPanel userProcessContainer;
    Ecosystem system;
    private HealthCampDirectory healthCampDirectory;
    private UserAccount account;
    private PetVolunteer petVolunteer;

    public RegisterHealthCamp(JPanel userProcessContainer, UserAccount account, Ecosystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;
        this.healthCampDirectory = healthCampDirectory;
        this.petVolunteer = petVolunteer;
        populateHealthCampTable();
    }

    public void populateHealthCampTable() {
        DefaultTableModel tablemodel = (DefaultTableModel) tblHealthCamp.getModel();

        tablemodel.setRowCount(0);
        for (HealthCamp healthCamp : system.getHealthCampDirectory().getHealthCampDirectory()) {

//            if (user.getRole().getClass().getName().equals("ReliefSystem.Role.HealthCampRole")) {
            Object[] row = new Object[1];
//                row[0] = user.getUsername();
            row[0] = healthCamp.getHealthCampName();
//                row[1] = user.getUsername();
//                row[2] = user.getPassword();
            tablemodel.addRow(row);
//            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHealthCamp = new javax.swing.JTable();
        btnRegisterForHealthCamp = new javax.swing.JButton();

        tblHealthCamp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Health Camp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHealthCamp);

        btnRegisterForHealthCamp.setText("Register");
        btnRegisterForHealthCamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterForHealthCampActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(btnRegisterForHealthCamp, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRegisterForHealthCamp)
                .addGap(71, 71, 71))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterForHealthCampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterForHealthCampActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblHealthCamp.getSelectedRow();
        String healthCampSelected = (String) tblHealthCamp.getValueAt(selectedRow, 0);
//        String healthCampChosen = (HealthCamp) tblHealthCamp.getValueAt(selectedRow,0);
//        System.out.println("Health camp selected " + healthCampSelected);
        for (ReliefSystem.PetVolunteer.PetVolunteer petVolunteer : system.getPetVolunteerDirectory().getPetVolunteerDirectory()) {
            if (petVolunteer.getUsername().equals(account.getUsername())) {
                System.out.println("pet type : " + petVolunteer.getPetType());
                petVolunteer.setHealthCamp(healthCampSelected);
//                healthCamp.getPetVolunteerList().add(petVolunteer);
//            int selectedRow = tblHealthCamp.getSelectedRow();
//        if(selectedRow<0){
//            JOptionPane.showMessageDialog(null,"Please select a row from the table to assign the order","Warning",JOptionPane.WARNING_MESSAGE);
//        }
            }
        }
//        else
//        {
//
//            HealthCamp deliveryMan  = (HealthCamp)tblHealthCamp.getValueAt(selectedRow, 0);
//            HealthCamp
//            order.setStatus("Assigned to Deliveryman");
//            JOptionPane.showMessageDialog(null, "Assigned to Delivery Man");    
//        }

    }//GEN-LAST:event_btnRegisterForHealthCampActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegisterForHealthCamp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHealthCamp;
    // End of variables declaration//GEN-END:variables
}
